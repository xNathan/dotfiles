set nocompatible

set nobackup
set noswapfile
set noundofile
set nu rnu
set cursorline
set ruler
set autoread
set t_vb=
set t_Co=256
set updatetime=250
set signcolumn=yes

syntax enable
syntax on

"Be smart when using tabs
set smarttab
"Use spaces instead of tabs
set expandtab
"1 tab = 4 spaces
set tabstop=4
set shiftwidth=4
set softtabstop=4

set autoindent "Auto indent
set smartindent "Smart indent

set incsearch "increase search
set hlsearch "highlight search result

set ignorecase
set smartcase

set lazyredraw
set splitright
set splitbelow

" Visual shifting (does not exit Visual mode)
vnoremap < <gv
vnoremap > >gv

set wrap

set wildmenu
set wildmode=longest:full,full

set completeopt-=preview
set completeopt+=noinsert

"Show matching brackets
set showmatch

" Required for operations modifying multiple buffers like rename.
set hidden

"Use Unix as the standard file type
set ffs=unix,dos,mac

"allow backspacing over everything in insert mode
set backspace=indent,eol,start

set scrolloff=3

let mapleader=' '
"nnoremap ; :
noremap H _
noremap L $
nnoremap j gj
nnoremap k gk

inoremap jk <esc>

"disable all arrow keys
map <up> <nop>
map <left> <nop>
map <right> <nop>
map <down> <nop>

nnoremap <leader>w :w!<CR>
nnoremap <leader>q :q!<CR>
nnoremap <leader>wq :wq!<CR>

"Enter into split windows
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

"Disable highlight after search
nnoremap <leader><space> :noh<cr>

" Yanking to the end of the line
nnoremap Y y$

" sudo write
cmap w!! w !sudo tee >/dev/null %

" vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')


Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

"Plug 'itchyny/lightline.vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-unimpaired'
Plug 'airblade/vim-gitgutter'
Plug 'scrooloose/nerdcommenter'
Plug 'mileszs/ack.vim'
Plug 'scrooloose/nerdtree'
Plug 'majutsushi/tagbar'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all --no-update-rc' }
Plug 'junegunn/fzf.vim'
Plug 'plasticboy/vim-markdown'
Plug 'godlygeek/tabular'
Plug 'w0rp/ale'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'raimondi/delimitmate'
Plug 'sheerun/vim-polyglot'
Plug 'ludovicchabant/vim-gutentags'
Plug 'justinmk/vim-sneak'

Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }


"Plug 'deoplete-plugins/deoplete-jedi'
"Plug 'davidhalter/jedi-vim'
Plug 'morhetz/gruvbox'
" Golang
Plug 'deoplete-plugins/deoplete-go', { 'do': 'make'}
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

Plug 'nathangrigg/vim-beancount'

Plug 'Shougo/echodoc.vim'
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
  Plug 'Shougo/defx.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'Shougo/defx.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif

call plug#end()

set laststatus=2
set showtabline=2
set noshowmode

if executable('rg')
  let g:ackprg = 'rg --vimgrep'
elseif executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

map <C-n> :NERDTreeToggle<CR>
nmap <leader>tb :TagbarToggle<CR>

let NERDTreeIgnore = ['\.pyc$', '^__pycache__$']

let g:deoplete#enable_at_startup = 1
let g:deoplete#sources#go#gocode_binary = $GOPATH.'/bin/gocode'
let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']

nnoremap <leader>f :Files<CR>
nnoremap <leader>b :Buffers<CR>
nnoremap <leader>rg :Rg<CR>

let g:vim_markdown_folding_disabled = 1
"let g:ackpreview = 1

let g:UltiSnipsSnippetDirectories=[$HOME.'/.vim/UltiSnips', 'UltiSnips']
" vertically split ultisnips edit window
let g:UltiSnipsEditSplit="vertical"

let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_enter = 0
let g:ale_python_black_executable = $HOME . '/.pyenv/versions/nvim3/bin/black'
let g:ale_python_pyls_executable = $HOME . '/.pyenv/versions/nvim3/bin/pyls'

" disable autocompletion, cause we use deoplete for completion
let g:jedi#completions_enabled = 0

silent! colorscheme gruvbox
set background=dark

let g:python3_host_prog = $HOME . '/.pyenv/versions/nvim3/bin/python'

let delimitMate_expand_cr = 1
au FileType python let b:delimitMate_nesting_quotes = ['"']

let g:airline_powerline_fonts = 1

let g:vim_markdown_frontmatter=1


let g:LanguageClient_serverCommands = {
    \ 'python': [$HOME . '/.pyenv/versions/nvim3/bin/pyls', '-vv', '--log-file', '/tmp/pyls.log'],
    \ }

nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>

function SetLSPShortcuts()
  nnoremap <leader>ld :call LanguageClient#textDocument_definition()<CR>
  nnoremap <leader>lr :call LanguageClient#textDocument_rename()<CR>
  nnoremap <leader>lf :call LanguageClient#textDocument_formatting()<CR>
  nnoremap <leader>lt :call LanguageClient#textDocument_typeDefinition()<CR>
  nnoremap <leader>lx :call LanguageClient#textDocument_references()<CR>
  nnoremap <leader>la :call LanguageClient_workspace_applyEdit()<CR>
  nnoremap <leader>lc :call LanguageClient#textDocument_completion()<CR>
  nnoremap <leader>lh :call LanguageClient#textDocument_hover()<CR>
  nnoremap <leader>ls :call LanguageClient_textDocument_documentSymbol()<CR>
  nnoremap <leader>lm :call LanguageClient_contextMenu()<CR>
endfunction()

augroup LSP
  autocmd!
  autocmd FileType python call SetLSPShortcuts()
augroup END

let g:echodoc#enable_at_startup = 1

"security settings for gopass
"https://github.com/gopasspw/gopass/blob/master/docs/setup.md#securing-your-editor
au BufNewFile,BufRead /dev/shm/gopass.* setlocal noswapfile nobackup noundofile
au BufNewFile,BufRead /private/**/gopass** setlocal noswapfile nobackup noundofile
